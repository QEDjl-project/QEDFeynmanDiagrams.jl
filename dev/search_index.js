var documenterSearchIndex = {"docs":
[{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"TBW","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"(Image: Virtual Particle Currents)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"For a usage example, please refer to the notebooks in the ./notebooks directory of the repository.","category":"page"},{"location":"contribution/#Contribution","page":"Contribution","title":"Contribution","text":"","category":"section"},{"location":"contribution/","page":"Contribution","title":"Contribution","text":"Feel free to open issues or pull requests to the official repository. Ideas, tips, bug reports, or contributions are all welcome.","category":"page"},{"location":"#QEDFeynmanDiagrams.jl","page":"QEDFeynmanDiagrams.jl","title":"QEDFeynmanDiagrams.jl","text":"","category":"section"},{"location":"","page":"QEDFeynmanDiagrams.jl","title":"QEDFeynmanDiagrams.jl","text":"This project is dedicated to generating Feynman diagrams for scattering processes in perturbative QED. It is part of the QEDjl-project and relies on QEDcore.jl. Furthermore, it can generate code to compute the matrix element for scattering processes, using ComputableDAGs.jl and RuntimeGeneratedFunctions.jl. For an example usage see the Jupyter notebooks in the notebooks directory.","category":"page"},{"location":"","page":"QEDFeynmanDiagrams.jl","title":"QEDFeynmanDiagrams.jl","text":"The inner workings of the project are explained in the manual.","category":"page"},{"location":"lib/internal/#Internal-functions-and-functionality","page":"Internal","title":"Internal functions and functionality","text":"","category":"section"},{"location":"lib/internal/","page":"Internal","title":"Internal","text":"CurrentModule = QEDFeynmanDiagrams","category":"page"},{"location":"lib/internal/#Types","page":"Internal","title":"Types","text":"","category":"section"},{"location":"lib/internal/","page":"Internal","title":"Internal","text":"AbstractTreeLevelFeynmanDiagram","category":"page"},{"location":"lib/internal/#QEDFeynmanDiagrams.AbstractTreeLevelFeynmanDiagram","page":"Internal","title":"QEDFeynmanDiagrams.AbstractTreeLevelFeynmanDiagram","text":"AbstractTreeLevelFeynmanDiagram\n\nAbstract base type for FeynmanDiagrams. Must implement the functions\n\nprocess(::AbstractTreeLevelFeynmanDiagram)::QEDbase.AbstractProcessDefinition\nvirtual_particles(::AbstractTreeLevelFeynmanDiagram)::NTuple{N, Tuple{QEDbase.AbstractParticleType, BitArray}}\n\nBy using the QEDbase.AbstractProcessDefinition interface, the function external_particles is automatically provided.\n\nFor more information on what the interface functions should do, see their documentation: process, virtual_particles\n\n\n\n\n\n","category":"type"},{"location":"lib/internal/#Functions","page":"Internal","title":"Functions","text":"","category":"section"},{"location":"lib/internal/","page":"Internal","title":"Internal","text":"disjunct\ncontains\nmake_up\nare_total\n_pseudo_virtual_particles","category":"page"},{"location":"lib/internal/#QEDFeynmanDiagrams.disjunct","page":"Internal","title":"QEDFeynmanDiagrams.disjunct","text":"disjunct(a::VirtualParticle, b::VirtualParticle)\n\nReturn true if the momenta contributions of a and b are disjunct.\n\n\n\n\n\n","category":"function"},{"location":"lib/internal/#QEDFeynmanDiagrams.contains","page":"Internal","title":"QEDFeynmanDiagrams.contains","text":"contains(a::VirtualParticle, b::VirtualParticle)\n\nReturns true if the set of particles contributing to a are contains the set of particles contributing to b.\n\n\n\n\n\n","category":"function"},{"location":"lib/internal/#QEDFeynmanDiagrams.make_up","page":"Internal","title":"QEDFeynmanDiagrams.make_up","text":"make_up(a::VirtualParticle, b::VirtualParticle, c::VirtualParticle)\n\nFor virtual particles a, b, and c, return true if a and b's joint momentum contributions add up to c's momentum contributions.\n\n\n\n\n\n","category":"function"},{"location":"lib/internal/#QEDFeynmanDiagrams.are_total","page":"Internal","title":"QEDFeynmanDiagrams.are_total","text":"are_total(a::VirtualParticle, b::VirtualParticle, c::VirtualParticle)\n\nReturn true if a, b and c combined contain all external particles exactly once.\n\n\n\n\n\n","category":"function"},{"location":"lib/internal/#QEDFeynmanDiagrams._pseudo_virtual_particles","page":"Internal","title":"QEDFeynmanDiagrams._pseudo_virtual_particles","text":"_pseudo_virtual_particles\n\nReturn a vector of VirtualParticle for each external particle. These are not actually virtual particles, but can be helpful as entry points.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Public-Interface","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"lib/public/#Types","page":"Public","title":"Types","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"FeynmanDiagram\nVirtualParticle","category":"page"},{"location":"lib/public/#QEDFeynmanDiagrams.FeynmanDiagram","page":"Public","title":"QEDFeynmanDiagrams.FeynmanDiagram","text":"FeynmanDiagram{N,E,U,T,M,FM} <: AbstractTreeLevelFeynmanDiagram\n\nAn implementation of AbstractTreeLevelFeynmanDiagram, representing Feynman diagrams of tree-level perturbative QED.\n\nThe type parameters are:\n\nN: The total number of fermion lines in the diagram, i.e., N := E + U + T\nE: The total number of external electrons/positron pairs in the scattering process.\nU: The total number of external muon/antimuon pairs in the scattering process.\nT: The total number of external tauon/antitauon pairs in the scattering process.\nM: The total number of external photons in the scattering process.\nFM: A FlatMatrix type to efficiently store the diagram layout in serial memory.\n\nnote: Note\nE, U, and T are numbers of Fermion lines while M is the number of individual external photons. This means the number of external legs is 2(E + U + T) + M.\n\nwarning: Warning\nWhile U and T can be non-zero in this type and the rest of the code in this package is ready to deal with muons and tauons, no types for them exist yet in the QEDjl-project. Therefore, some functions will throw unimplemented errors when used with non-zero values for U and T.\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#QEDFeynmanDiagrams.VirtualParticle","page":"Public","title":"QEDFeynmanDiagrams.VirtualParticle","text":"VirtualParticle{\n    PROC<:AbstractProcessDefinition,\n    PT<:AbstractParticleType,\n    I,\n    O,\n}\n\nRepresentation of a virtual particle and the return type of the virtual_particles function. The type parameters are:\n\nPROC: The process this particle is a process of.\nPT: The particle type of this virtual particle, e.g. Photon or Electron.\nI: The number of incoming particles of the process, i.e. I := length(incoming_paritcles(PROC()))\nO: The number of outgoing particles of the process, i.e. O := length(outgoing_paritcles(PROC()))\n\n\n\n\n\n","category":"type"},{"location":"lib/public/#Functions","page":"Public","title":"Functions","text":"","category":"section"},{"location":"lib/public/","page":"Public","title":"Public","text":"feynman_diagrams\nexternal_particles\nvirtual_particles\nprocess\ngenerate_DAG","category":"page"},{"location":"lib/public/#QEDFeynmanDiagrams.feynman_diagrams","page":"Public","title":"QEDFeynmanDiagrams.feynman_diagrams","text":"feynman_diagrams(proc::AbstractProcessDefinition)\n\nReturn all tree-level Feynman diagrams that contribute to the given process, in perturbative QED.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#QEDFeynmanDiagrams.external_particles","page":"Public","title":"QEDFeynmanDiagrams.external_particles","text":"external_particles(diagram::AbstractTreeLevelFeynmanDiagram)\n\nReturn a tuple of the incoming and outgoing particles (QEDbase.AbstractParticleType) of the diagram.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#QEDFeynmanDiagrams.virtual_particles","page":"Public","title":"QEDFeynmanDiagrams.virtual_particles","text":"virtual_particles(::QEDbase.AbstractProcessDefinition, ::AbstractTreeLevelFeynmanDiagram)::Vector{VirtualParticle}\n\nInterface function that must be implemented for an instance of AbstractTreeLevelFeynmanDiagram.\n\nReturn an NTuple with N elements, where N is the number of virtual particles in this diagram. For tree-level Feynman diagrams, N = k - 3, where k is the number of external particles. The elements of the NTuple are themselves Tuples, containing for each virtual particle its QEDbase.AbstractParticleType and an NTuple{, Bool} indicating with a 1 that an incoming external particle's momentum contributes to the virtual particle's momentum, and a 0 otherwise. The second NTuple{, Bool} does the same for the outgoing external particles, which contribute their momentum negatively. From this definition follows that a particles' Boolean NTupless are equivalent to their inverse, i.e., BitArrays where every bit is negated.\n\nExample: Consider the Compton scattering process e^- + gamma to e^- + gamma with the diagram where the incoming electron interacts with the incoming photon first. For this diagram there is exactly one virtual particle, which is an electron. This electron's momentum can be represented as the sum of the two incoming particles' momenta, or  that of the two outgoing particles. In the second possible diagram, where the incoming electron interacts with the outgoing photon first, the virtual particle is still an electron but its momentum is the sum of the momenta of the incoming electron and the outgoing photon, or, equivalently, the outgoing electron and the incoming photon.\n\nvirtual_particles(::AbstractProcessDefinition)::Vector{VirtualParticle}\n\nFunction that returns all unique virtual particles of the given process.\n\nnote: Note\nThis function is usually costly to compute and used across multiple functions. Therefore, it caches its results using Memoization.jl.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#QEDbase.process","page":"Public","title":"QEDbase.process","text":"process(::AbstractTreeLevelFeynmanDiagram)::QEDbase.AbstractProcessDefinition\n\nInterface function that must be implemented for an instance of AbstractTreeLevelFeynmanDiagram.\n\nReturn the specific QEDbase.AbstractProcessDefinition which the given diagram is for.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#QEDFeynmanDiagrams.generate_DAG","page":"Public","title":"QEDFeynmanDiagrams.generate_DAG","text":"generate_DAG(proc::AbstractProcessDefinition)\n\nGenerate and return a DAG from ComputableDAGs, representing the computation for the squared matrix element of this scattering process, summed over spin and polarization combinations allowed by the process.\n\n\n\n\n\n","category":"function"}]
}
